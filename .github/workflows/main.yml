name: Onespace-core-apps-deployment-to-DEV
on:
  workflow_dispatch:
    inputs:
               aws-region:
                    type: choice
                    description: 'region'
                    required: true
                    options:
                         - 'us-east-1'
               aws-access-key-id:
                    type: string
                    description: 'aws-access-key-id'
                    required: true
               aws-secret-access-key:
                    type: string
                    description: 'secret-access-key-id'
                    required: true               
               
                       
jobs:  
  build:    
    name: Build Image
    runs-on: ubuntu-latest
    steps:     
      - name: Check out code
        uses: actions/checkout@v2    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id:  ${{ github.event.inputs.aws-access-key-id }}
          aws-secret-access-key: ${{ github.event.inputs.aws-secret-access-key }}
          aws-region: ${{ github.event.inputs.aws-region }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: docker_springboot_demo
          IMAGE_TAG: ${{ github.sha }}
        uses: adrielcodeco/docker-compose-run-action@v1
        with:
          compose-file: './docker-compose.yml'
          service: backend 
        
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: testdefinition
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1 
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: testdefintion 
          cluster: testdefinition
